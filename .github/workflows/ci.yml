name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts
          path: |
            .next/
            coverage/

      - name: Comment PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🧪 Test Results')
            );

            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const message = status === 'success' 
              ? 'All tests passed! Ready for review.' 
              : 'Some tests failed. Please check the logs.';

            const body = `## 🧪 Test Results

            ${emoji} **Status:** ${status.toUpperCase()}

            ${message}

            **Details:**
            - Linting: ${status === 'success' ? '✅ Passed' : '❌ Failed'}
            - Tests: ${status === 'success' ? '✅ Passed' : '❌ Failed'}
            - Build: ${status === 'success' ? '✅ Passed' : '❌ Failed'}

            _This comment was automatically generated by GitHub Actions._`;

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }
